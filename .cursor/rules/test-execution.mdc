---
description:
globs:
alwaysApply: false
---
# Test Execution Process

## Prerequisites
- PHP 8.3.x with correct API version (20230831)
- All required PHP extensions enabled
- MySQL and Redis services running
- Composer dependencies installed
- Test database configured

## Test Configuration
- Main configuration: [phpunit.xml](mdc:phpunit.xml)
- Test suites defined:
  - Unit tests
  - Feature tests
  - Integration tests
  - Performance tests
  - Security tests

## Test Execution Steps
1. Environment Verification
   ```bash
   php -v
   php -m
   ```

2. Run All Tests
   ```bash
   php vendor/bin/phpunit
   ```

3. Run Specific Test Suite
   ```bash
   php vendor/bin/phpunit --testsuite Unit
   php vendor/bin/phpunit --testsuite Feature
   php vendor/bin/phpunit --testsuite Integration
   ```

## Test Results
- Results are stored in [.codespaces/testing/.test/results/](mdc:.codespaces/testing/.test/results/)
- Environment reports are generated for each test run
- Test failures are logged with detailed error messages

## Common Test Failures
1. Environment Issues
   - PHP version mismatch
   - Missing extensions
   - Service connection failures

2. Database Issues
   - Connection failures
   - Missing tables
   - Invalid credentials

3. Redis Issues
   - Connection failures
   - Authentication errors
   - Memory limits

## Test Maintenance
- Regular test suite updates
- Environment report reviews
- Failed test analysis
- Performance monitoring
- Security test updates

## Test Categories
Based on [test_plan.md](mdc:.reports/test_plan.md), tests are organized into:

### Unit Tests
1. Service Health Agent Tests
   - Health check scenarios
   - Configuration validation
   - Error handling
   - Metrics collection

2. Deployment Automation Agent Tests
   - Deployment scenarios
   - Rollback procedures
   - Environment validation
   - Metrics collection

### Code Quality Tests
1. PSR-12 Compliance
   - ServiceHealthAgent.php
   - ServiceHealthAgentTest.php
   - DeploymentAutomationAgent.php
   - DeploymentAutomationAgentTest.php

2. Code Quality Checks
   - PHPMD violations
   - Code complexity
   - Best practices

## Progress Tracking
Test execution progress is tracked in [test_plan.md](mdc:.reports/test_plan.md):

### Current Status
- Unit Tests: Not Started
- Code Sniffs: Not Started

### Execution Steps
1. Run Service Health Agent unit tests
2. Record results
3. Run Deployment Automation Agent unit tests
4. Record results
5. Run PSR-12 code sniffs
6. Record results
7. Run code quality sniffs
8. Record results
9. Address any failures
10. Re-run tests and sniffs
11. Update progress

## Test Results Storage
Test results are stored in:
- `.errors/` - For test errors
- `.failures/` - For test failures
- `.reports/` - For test reports and metrics

## Test Metrics
Current test metrics (as of last run):
```json
{
    "total": 0,
    "passed": 0,
    "failed": 0,
    "failures": []
}
```

## Code Quality Metrics
Current code quality metrics:
```json
{
    "total": 11,
    "passed": 0,
    "failed": 11,
    "violations": {
        "psr12": {
            "tests": 6,
            "failures": 6,
            "errors": 0
        },
        "phpmd": {
            "violations": 11
        }
    }
}
```
