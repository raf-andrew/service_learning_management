---
description:
globs:
alwaysApply: false
---
# MCP Framework Testing Standards

## Test Organization

1. Directory Structure
   ```
   tests/MCP/
   ├── Core/
   │   ├── Database/
   │   │   └── ConnectionManagerTest.php
   │   └── ...
   ├── Models/
   │   └── BaseModelTest.php
   ├── Controllers/
   │   └── BaseControllerTest.php
   └── Presenters/
       └── BasePresenterTest.php
   ```

2. Test Files
   - One test class per framework class
   - Mirror source directory structure
   - Use `Test` suffix for test classes

## Test Structure

1. Test Class Template
   ```php
   namespace MCP\Tests\{Component};

   use PHPUnit\Framework\TestCase;
   use MCP\{Component}\{Class};

   class {Class}Test extends TestCase
   {
       protected function setUp(): void
       {
           // Setup code
       }

       protected function tearDown(): void
       {
           // Cleanup code
       }
   }
   ```

2. Test Method Template
   ```php
   public function test{Feature}(): void
   {
       // Arrange
       $input = // ...

       // Act
       $result = // ...

       // Assert
       $this->assert{Condition}($expected, $result);
   }
   ```

## Testing Practices

1. Coverage Requirements
   - 100% method coverage
   - 100% line coverage
   - 100% branch coverage
   - Test all edge cases

2. Test Types
   - Unit tests
   - Integration tests
   - Feature tests
   - Performance tests

3. Test Data
   - Use factories
   - Mock external services
   - Use test databases
   - Clean up after tests

## Test Examples

1. Model Testing ([tests/MCP/Models/BaseModelTest.php](mdc:tests/MCP/Models/BaseModelTest.php))
   ```php
   public function testCreate(): void
   {
       $data = ['name' => 'Test'];
       $result = $this->model->create($data);
       $this->assertIsInt($result);
   }
   ```

2. Controller Testing ([tests/MCP/Controllers/BaseControllerTest.php](mdc:tests/MCP/Controllers/BaseControllerTest.php))
   ```php
   public function testHandleRequest(): void
   {
       $result = $this->controller->handleRequest('index');
       $this->assertTrue($result['success']);
   }
   ```

3. Presenter Testing ([tests/MCP/Presenters/BasePresenterTest.php](mdc:tests/MCP/Presenters/BasePresenterTest.php))
   ```php
   public function testFormatResponse(): void
   {
       $data = ['key' => 'value'];
       $result = $this->presenter->formatResponse($data);
       $this->assertEquals($data, $result['data']);
   }
   ```

## Test Configuration

1. PHPUnit Configuration ([phpunit.xml](mdc:phpunit.xml))
   ```xml
   <testsuites>
       <testsuite name="MCP Framework Tests">
           <directory>tests/MCP</directory>
       </testsuite>
   </testsuites>
   ```

2. Test Environment
   - Use SQLite for testing
   - Mock external services
   - Use test configuration
   - Isolate test data

3. Coverage Reports
   - Generate HTML reports
   - Track coverage trends
   - Enforce coverage rules
   - Review uncovered code
