---
description:
globs:
alwaysApply: false
---
# MCP Test Framework Architecture

## Core Components

### 1. Test Runner
The test runner ([tests/run-tests.php](mdc:tests/run-tests.php)) is the main orchestrator that:
- Manages test execution lifecycle
- Handles environment setup and teardown
- Implements self-healing mechanisms
- Generates comprehensive test reports

Key features:
- Automatic directory creation
- Environment variable management
- Service health monitoring
- Test result aggregation
- Error recovery mechanisms

### 2. Remote Service Manager
The RemoteServiceManager class manages all remote service connections:
- Database connections
- Redis cache
- Mail transport
- MCP API client

Features:
- Connection pooling
- Automatic reconnection
- Health monitoring
- Resource cleanup
- Error handling

### 3. Test Base Class
The BaseTestCase ([tests/MCP/BaseTestCase.php](mdc:tests/MCP/BaseTestCase.php)) provides:
- Common test setup
- Service initialization
- Data cleanup
- Error handling
- Logging capabilities

## Test Categories

### 1. Unit Tests
Location: `tests/MCP/Unit/`
- Test individual components
- Mock external dependencies
- Focus on business logic
- Fast execution

### 2. Integration Tests
Location: `tests/MCP/Integration/`
- Test service interactions
- Use real remote services
- Verify data flow
- Test error scenarios

### 3. End-to-End Tests
Location: `tests/MCP/EndToEnd/`
- Test complete workflows
- Use production-like data
- Verify system behavior
- Test user scenarios

## Configuration Management

### 1. PHPUnit Configuration
[tests/phpunit.xml](mdc:tests/phpunit.xml) defines:
- Test suites
- Coverage settings
- Environment variables
- Test execution options

### 2. Remote Services Configuration
[tests/config/remote-services.php](mdc:tests/config/remote-services.php) contains:
- Service endpoints
- Authentication details
- Timeout settings
- Retry policies

## Logging and Reporting

### 1. Test Logs
- Detailed execution logs
- Error tracking
- Performance metrics
- Service health status

### 2. Coverage Reports
- Code coverage metrics
- HTML reports
- XML coverage data
- Coverage thresholds

### 3. Test Reports
- Test execution summary
- Failure details
- Performance statistics
- Service health status

## Self-Healing Mechanisms

### 1. Environment Healing
- Directory creation
- Environment variable loading
- Configuration validation
- Resource cleanup

### 2. Service Healing
- Connection retry
- Health check recovery
- Resource cleanup
- Error state recovery

### 3. Data Healing
- Test data cleanup
- Database state recovery
- Cache clearing
- Temporary file cleanup

## Best Practices

### 1. Test Organization
- Clear directory structure
- Consistent naming conventions
- Proper test isolation
- Resource management

### 2. Error Handling
- Comprehensive error logging
- Graceful failure handling
- Recovery mechanisms
- Clear error messages

### 3. Performance
- Efficient resource usage
- Parallel test execution
- Proper cleanup
- Resource pooling

### 4. Maintenance
- Regular log rotation
- Configuration updates
- Dependency management
- Documentation updates

