---
description:
globs:
alwaysApply: false
---
# Testing Guidelines

## Test Organization
Tests are organized in the following structure:

- `tests/Unit/` - Unit tests
  - [ServiceHealthAgentTest.php](mdc:tests/Unit/ServiceHealthAgentTest.php)
  - [DeploymentAutomationAgentTest.php](mdc:tests/Unit/DeploymentAutomationAgentTest.php)

- `tests/Integration/` - Integration tests
  - API endpoint tests
  - Database integration tests

## Running Tests
Tests can be run using:

1. Docker (recommended):
```bash
docker-compose -f docker-compose.test.yml up --build
```

2. Direct PHPUnit:
```bash
./vendor/bin/phpunit
```

## Test Requirements

### Unit Tests
- Each class must have corresponding unit tests
- Test coverage should be >80%
- Tests should be independent and isolated
- Mock external dependencies

### Integration Tests
- Test API endpoints
- Test database operations
- Test service interactions
- Test error handling

## Code Quality
Code quality is enforced through:

- PSR-12 compliance
- PHP_CodeSniffer checks
- PHPMD analysis
- Code coverage reports

## Test Reports
Test results are stored in:

- `.temp/` - Temporary test results
- `.reports/` - Final test reports
  - [test_plan.md](mdc:.reports/test_plan.md)

## Continuous Integration
Tests are automatically run:

- On pull requests
- On merges to main
- On scheduled basis

## Test Structure
All tests should follow the structure defined in [test_plan.md](mdc:.reports/test_plan.md).

### Unit Test Requirements
1. Each agent must have corresponding test cases
2. Test methods should be named descriptively (e.g., `test_check_health_successful_check`)
3. Tests must cover both success and failure scenarios
4. All tests must be independent and isolated

### Code Quality Requirements
1. All code must pass PSR-12 compliance checks
2. Code quality metrics must be monitored using PHPMD
3. Test coverage should be maintained at a high level

## Test Execution
Tests are executed using Docker as defined in [Dockerfile.test](mdc:Dockerfile.test).

### Running Tests
1. Unit tests are run using PHPUnit
2. Code sniffs are run using PHP_CodeSniffer
3. Code quality checks are run using PHPMD

### Test Results
Test results are stored in:
- `.errors/` - For test errors
- `.failures/` - For test failures
- `.reports/` - For test reports and metrics

## Agent Testing
### Service Health Agent
Must test:
- Health check functionality
- Metrics collection
- Error handling
- Configuration validation

### Deployment Automation Agent
Must test:
- Deployment process
- Rollback functionality
- Environment validation
- Metrics collection
