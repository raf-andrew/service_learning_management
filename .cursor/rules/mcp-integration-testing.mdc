---
description:
globs:
alwaysApply: false
---
# MCP Integration Testing Guidelines

## Integration Test Structure

### 1. Remote Service Tests
[tests/MCP/Integration/RemoteServiceTest.php](mdc:tests/MCP/Integration/RemoteServiceTest.php) demonstrates:
- Service connection testing
- Health check verification
- Error handling
- Resilience testing

Key test methods:
```php
testDatabaseConnection()
testRedisConnection()
testMailConnection()
testMCPServiceConnection()
testServiceResilience()
testConcurrentServiceAccess()
testServiceErrorHandling()
```

### 2. Test Setup
Each integration test should:
- Extend BaseTestCase
- Initialize required services
- Set up test data
- Clean up after tests

Example:
```php
class MyIntegrationTest extends BaseTestCase
{
    protected function setUp(): void
    {
        parent::setUp();
        // Additional setup
    }

    protected function tearDown(): void
    {
        // Cleanup
        parent::tearDown();
    }
}
```

## Service Testing Guidelines

### 1. Database Testing
- Test connection establishment
- Verify database operations
- Handle transaction rollback
- Clean up test data

Example:
```php
public function testDatabaseOperations(): void
{
    DB::beginTransaction();
    try {
        // Test operations
        $this->assertTrue(/* condition */);
    } finally {
        DB::rollBack();
    }
}
```

### 2. Redis Testing
- Test cache operations
- Verify data persistence
- Handle connection issues
- Clean up test keys

Example:
```php
public function testRedisOperations(): void
{
    $key = 'test_key_' . uniqid();
    try {
        Redis::set($key, 'value');
        $this->assertEquals('value', Redis::get($key));
    } finally {
        Redis::del($key);
    }
}
```

### 3. Mail Testing
- Test mail transport
- Verify message delivery
- Handle connection issues
- Clean up test messages

Example:
```php
public function testMailDelivery(): void
{
    Mail::fake();
    // Test mail sending
    Mail::assertSent(/* mail class */);
}
```

### 4. MCP Service Testing
- Test API endpoints
- Verify response handling
- Handle authentication
- Test error scenarios

Example:
```php
public function testMCPService(): void
{
    $client = $this->serviceManager->getConnection('mcp');
    $response = $client->get('/endpoint');
    $this->assertEquals(200, $response->getStatusCode());
}
```

## Error Handling

### 1. Connection Errors
- Test connection timeouts
- Handle network issues
- Verify retry mechanisms
- Log error details

### 2. Service Errors
- Test invalid responses
- Handle authentication failures
- Verify error messages
- Test recovery mechanisms

### 3. Data Errors
- Test invalid data
- Handle validation errors
- Verify error reporting
- Test data cleanup

## Performance Testing

### 1. Load Testing
- Test concurrent requests
- Measure response times
- Verify resource usage
- Monitor service health

### 2. Stress Testing
- Test service limits
- Verify error handling
- Measure recovery time
- Monitor system stability

## Best Practices

### 1. Test Isolation
- Use unique test data
- Clean up after tests
- Avoid test dependencies
- Reset service state

### 2. Error Recovery
- Implement retry logic
- Handle timeouts
- Clean up resources
- Log error details

### 3. Test Data Management
- Use test fixtures
- Clean up test data
- Avoid data conflicts
- Reset service state

### 4. Logging and Monitoring
- Log test execution
- Monitor service health
- Track performance metrics
- Report test results

