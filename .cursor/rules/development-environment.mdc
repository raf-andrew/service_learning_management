---
description:
globs:
alwaysApply: false
---
# Development Environment Setup

## Prerequisites
- Docker Desktop
- Git
- Composer
- PHP 8.2+

## Local Setup

### 1. Clone Repository
```bash
git clone [repository-url]
cd service_learning_management
```

### 2. Docker Setup
The project uses Docker for development and testing:

- [Dockerfile](mdc:Dockerfile) - Main application container
- [Dockerfile.test](mdc:Dockerfile.test) - Testing container
- [docker-compose.yml](mdc:docker-compose.yml) - Development environment
- [docker-compose.test.yml](mdc:docker-compose.test.yml) - Testing environment

### 3. Development Environment
Start the development environment:
```bash
docker-compose up -d
```

### 4. Testing Environment
Run tests using Docker:
```bash
docker-compose -f docker-compose.test.yml up --build
```

## Configuration

### Environment Variables
- Copy `.env.example` to `.env`
- Update environment variables as needed

### Database
- Database configuration in [config/database.php](mdc:config/database.php)
- Run migrations: `php artisan migrate`

## Development Tools

### Code Quality
- PHP_CodeSniffer for PSR-12 compliance
- PHPMD for code analysis
- PHPUnit for testing

### IDE Setup
- Install PHP extensions
- Configure PHP_CodeSniffer
- Set up debugging

## Testing

### Running Tests
1. Unit Tests:
```bash
./vendor/bin/phpunit
```

2. Code Sniffs:
```bash
./vendor/bin/phpcs
```

3. Code Analysis:
```bash
./vendor/bin/phpmd
```

### Test Reports
- Test results in `.temp/`
- Final reports in `.reports/`
  - [test_plan.md](mdc:.reports/test_plan.md)
