<?php

namespace Tests\MCP\Agents\Development\CodeAnalysis;

use PHPUnit\Framework\TestCase;
use MCP\Agents\Development\CodeAnalysis\SecurityVulnerabilityScanningAgent;
use MCP\Core\Services\HealthMonitor;
use MCP\Core\Services\AgentLifecycleManager;
use Psr\Log\LoggerInterface;

class SecurityVulnerabilityScanningAgentTest extends TestCase
{
    private SecurityVulnerabilityScanningAgent $agent;
    private HealthMonitor $healthMonitor;
    private AgentLifecycleManager $lifecycleManager;
    private LoggerInterface $logger;

    protected function setUp(): void
    {
        $this->healthMonitor = $this->createMock(HealthMonitor::class);
        $this->lifecycleManager = $this->createMock(AgentLifecycleManager::class);
        $this->logger = $this->createMock(LoggerInterface::class);

        $this->agent = new SecurityVulnerabilityScanningAgent(
            $this->healthMonitor,
            $this->lifecycleManager,
            $this->logger
        );
    }

    public function testInitialization(): void
    {
        $this->healthMonitor->expects($this->once())
            ->method('registerAgent')
            ->with($this->agent);

        $this->lifecycleManager->expects($this->once())
            ->method('registerAgent')
            ->with($this->agent);

        $this->agent->initialize();
    }

    public function testShutdown(): void
    {
        $this->healthMonitor->expects($this->once())
            ->method('unregisterAgent')
            ->with($this->agent);

        $this->lifecycleManager->expects($this->once())
            ->method('unregisterAgent')
            ->with($this->agent);

        $this->agent->shutdown();
    }

    public function testGetHealthStatus(): void
    {
        $status = $this->agent->getHealthStatus();
        $this->assertIsArray($status);
        $this->assertArrayHasKey('status', $status);
        $this->assertArrayHasKey('metrics', $status);
    }

    public function testAnalyzeWithNonExistentFile(): void
    {
        $this->logger->expects($this->once())
            ->method('warning')
            ->with($this->stringContains('File not found'));

        $result = $this->agent->analyze(['non_existent_file.php']);
        $this->assertIsArray($result);
        $this->assertArrayHasKey('metrics', $result);
        $this->assertArrayHasKey('vulnerabilities', $result);
        $this->assertArrayHasKey('recommendations', $result);
    }

    public function testAnalyzeWithValidFile(): void
    {
        $tempFile = tempnam(sys_get_temp_dir(), 'test_');
        file_put_contents($tempFile, '<?php $db->query($_GET["id"]); ?>');

        $result = $this->agent->analyze([$tempFile]);

        $this->assertIsArray($result);
        $this->assertArrayHasKey('metrics', $result);
        $this->assertArrayHasKey('vulnerabilities', $result);
        $this->assertArrayHasKey('recommendations', $result);
        $this->assertArrayHasKey('summary', $result);

        unlink($tempFile);
    }

    public function testGetMetrics(): void
    {
        $metrics = $this->agent->getMetrics();
        $this->assertIsArray($metrics);
        $this->assertArrayHasKey('critical_vulnerabilities', $metrics);
        $this->assertArrayHasKey('high_vulnerabilities', $metrics);
        $this->assertArrayHasKey('medium_vulnerabilities', $metrics);
        $this->assertArrayHasKey('low_vulnerabilities', $metrics);
        $this->assertArrayHasKey('security_score', $metrics);
    }

    public function testGetRecommendations(): void
    {
        $recommendations = $this->agent->getRecommendations();
        $this->assertIsArray($recommendations);
        $this->assertArrayHasKey('critical', $recommendations);
        $this->assertArrayHasKey('high', $recommendations);
        $this->assertArrayHasKey('medium', $recommendations);
        $this->assertArrayHasKey('low', $recommendations);
    }

    public function testGetReport(): void
    {
        $report = $this->agent->getReport();
        $this->assertIsArray($report);
        $this->assertArrayHasKey('metrics', $report);
        $this->assertArrayHasKey('vulnerabilities', $report);
        $this->assertArrayHasKey('recommendations', $report);
        $this->assertArrayHasKey('summary', $report);
        $this->assertArrayHasKey('timestamp', $report);
    }

    public function testAnalyzeWithInvalidPhpFile(): void
    {
        $tempFile = tempnam(sys_get_temp_dir(), 'test_');
        file_put_contents($tempFile, '<?php invalid code here');

        $this->logger->expects($this->once())
            ->method('warning')
            ->with($this->stringContains('Failed to parse file'));

        $result = $this->agent->analyze([$tempFile]);
        $this->assertIsArray($result);

        unlink($tempFile);
    }

    public function testVulnerabilityDetection(): void
    {
        $tempFile = tempnam(sys_get_temp_dir(), 'test_');
        $code = <<<'PHP'
<?php
$db->query($_GET['id']);
echo $_GET['name'];
include $_GET['file'];
exec($_GET['cmd']);
md5($_GET['password']);
PHP;
        file_put_contents($tempFile, $code);

        $result = $this->agent->analyze([$tempFile]);

        $this->assertGreaterThan(0, $result['metrics']['critical_vulnerabilities']);
        $this->assertGreaterThan(0, $result['metrics']['high_vulnerabilities']);
        $this->assertGreaterThan(0, $result['metrics']['medium_vulnerabilities']);
        $this->assertLessThan(100, $result['metrics']['security_score']);

        unlink($tempFile);
    }

    public function testSecurityScoreCalculation(): void
    {
        $tempFile = tempnam(sys_get_temp_dir(), 'test_');
        $code = <<<'PHP'
<?php
$db->query($_GET['id']);
echo $_GET['name'];
include $_GET['file'];
exec($_GET['cmd']);
md5($_GET['password']);
PHP;
        file_put_contents($tempFile, $code);

        $result = $this->agent->analyze([$tempFile]);
        $metrics = $result['metrics'];

        $expectedScore = 100;
        $expectedScore -= $metrics['critical_vulnerabilities'] * 20;
        $expectedScore -= $metrics['high_vulnerabilities'] * 10;
        $expectedScore -= $metrics['medium_vulnerabilities'] * 5;
        $expectedScore -= $metrics['low_vulnerabilities'] * 2;
        $expectedScore = max(0, $expectedScore);

        $this->assertEquals($expectedScore, $metrics['security_score']);

        unlink($tempFile);
    }

    public function testSummaryGeneration(): void
    {
        $tempFile = tempnam(sys_get_temp_dir(), 'test_');
        $code = <<<'PHP'
<?php
$db->query($_GET['id']);
echo $_GET['name'];
include $_GET['file'];
exec($_GET['cmd']);
md5($_GET['password']);
PHP;
        file_put_contents($tempFile, $code);

        $result = $this->agent->analyze([$tempFile]);
        $summary = $result['summary'];

        $this->assertArrayHasKey('overall_security_score', $summary);
        $this->assertArrayHasKey('critical_issues', $summary);
        $this->assertArrayHasKey('improvement_areas', $summary);
        $this->assertNotEmpty($summary['critical_issues']);
        $this->assertNotEmpty($summary['improvement_areas']);

        unlink($tempFile);
    }
} 