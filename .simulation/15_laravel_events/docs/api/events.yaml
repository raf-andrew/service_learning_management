openapi: 3.0.0
info:
  title: Laravel Events API
  description: API documentation for the Laravel events system
  version: 1.0.0
  contact:
    name: System
    email: system@example.com

tags:
  - name: Events
    description: Event system operations

paths:
  /api/events:
    post:
      tags:
        - Events
      summary: Dispatch an event
      description: Dispatches a new event to the system
      operationId: dispatchEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      responses:
        '200':
          description: Event dispatched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    EventRequest:
      type: object
      required:
        - event_type
        - data
      properties:
        event_type:
          type: string
          description: Type of event to dispatch
          enum:
            - UserRegistered
            - UserLoggedIn
            - UserLoggedOut
            - UserPasswordChanged
            - UserProfileUpdated
        data:
          type: object
          description: Event data
          additionalProperties: true

    EventResponse:
      type: object
      required:
        - success
        - event_id
        - timestamp
      properties:
        success:
          type: boolean
          description: Whether the event was dispatched successfully
        event_id:
          type: string
          format: uuid
          description: Unique identifier for the event
        timestamp:
          type: string
          format: date-time
          description: When the event was dispatched
        broadcast_status:
          type: object
          description: Status of event broadcasting
          properties:
            channels:
              type: array
              items:
                type: string
              description: Channels the event was broadcast on
            queue:
              type: string
              description: Queue the event was sent to

    BaseEvent:
      type: object
      required:
        - broadcastAs
        - broadcastOn
        - broadcastWith
        - broadcastWhen
        - broadcastQueue
      properties:
        broadcastAs:
          type: string
          description: Event broadcast name
        broadcastOn:
          type: array
          items:
            $ref: '#/components/schemas/BroadcastChannel'
          description: Channels to broadcast on
        broadcastWith:
          type: object
          description: Data to broadcast
          additionalProperties: true
        broadcastWhen:
          type: boolean
          description: Whether to broadcast the event
        broadcastQueue:
          type: string
          description: Queue to use for broadcasting

    BroadcastChannel:
      type: object
      required:
        - type
        - name
      properties:
        type:
          type: string
          enum:
            - public
            - private
            - presence
          description: Type of broadcast channel
        name:
          type: string
          description: Channel name

    UserRegistered:
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/User'

    UserLoggedIn:
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/User'

    UserLoggedOut:
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/User'

    UserPasswordChanged:
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/User'

    UserProfileUpdated:
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
        - type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/User'

    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          description: User ID
        name:
          type: string
          description: User's name
        email:
          type: string
          format: email
          description: User's email address

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
        code:
          type: integer
          description: Error code 